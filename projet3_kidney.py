# -*- coding: utf-8 -*-
"""Projet3_final_LAMAND_Christophe_17_06_2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vMuJdzHo0QLttIBqdxx8tbhpb90Vy8B-
"""

import pandas as pd

df_kidney = pd.read_csv("kidney_clean.csv").drop(columns="Unnamed: 0")

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline as ImbPipeline

# Diviser les données en ensembles d'entraînement et de test
X = df_kidney.drop(columns=["id", "classification"]).copy()
y = df_kidney["classification"].astype('category')

# Séparer les colonnes numériques et catégorielles
numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns
categorical_cols = X.select_dtypes(include=['object']).columns

# Définir le préprocesseur pour les colonnes numériques et catégorielles
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_cols),
        ('cat', OneHotEncoder(), categorical_cols)
    ])

# Définir les techniques de rééchantillonnage
over_sampler = SMOTE(random_state=42)
under_sampler = RandomUnderSampler(random_state=42)

# Correction du pipeline avec le bon scaler et modèle
pipeline = ImbPipeline([
    ('preprocessor', preprocessor),
    ('over', over_sampler),
    ('under', under_sampler),
    ('model', RandomForestClassifier(random_state=42))
])

# Diviser les données en ensembles d'entraînement et de test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Entraîner le pipeline sur l'ensemble d'entraînement complet
pipeline.fit(X_train, y_train)

def prediction_kidney(liste):
    df_liste = pd.DataFrame(liste, columns=['age', 'bp', 'sg', 'al', 'su', 'rbc', 'pc', 'pcc', 'ba', 'bgr', 'bu',
       'sc', 'sod', 'pot', 'hemo', 'pcv', 'wc', 'rc', 'htn', 'dm', 'cad',
       'appet', 'pe', 'ane'])
    return pipeline.predict(df_liste)[0]
