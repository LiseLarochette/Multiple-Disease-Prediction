# -*- coding: utf-8 -*-
"""projet_ 3_liver.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fixYLKt0fSTf--5d4GxinGSdxVXIMMJT
"""

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PowerTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline as ImbPipeline
import pandas as pd

liver = pd.read_csv("liver.csv")

# Charger les données
X = liver.drop(columns=['Dataset'])
y = liver['Dataset']

# Diviser les données en ensembles d'entraînement et de test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Définir les techniques de rééchantillonnage
over_sampler = SMOTE(random_state=42)
under_sampler = RandomUnderSampler(random_state=42)
# Créer le pipeline avec PowerTransformer, SMOTE, RandomUnderSampler, et Logistic Regression
pipeline = ImbPipeline([
    ('scaler', PowerTransformer()),
    ('over', over_sampler),
    ('under', under_sampler),
    ('model', LogisticRegression(random_state=42))
])
# Entraîner le pipeline
pipeline.fit(X_train, y_train)
# Prédictions sur l'ensemble de test
y_pred = pipeline.predict(X_test)

def prediction_liver(liste):
    
  df_csv = pd.DataFrame(liste, columns=['Age', 'Total_Bilirubin', 'Alkaline_Phosphotase', 'Alamine_Aminotransferase', 'Albumin_and_Globulin_Ratio', 'Gender_Female', 'Gender_Male']))

  if pipeline.predict(df_csv)[0] == 0 :
    return "La maladie n'est pas détectée"
  else :
    return "La maladie est détectée"
